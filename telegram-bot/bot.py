import os
import json
import time
import random
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.dispatcher.filters import Command

# –ü—É—Ç–∏ –¥–ª—è Render (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –¥–∏—Å–∫)
USER_DATA_FILE = os.path.join(os.getenv("RENDER_DISK_PATH", "."), "users_data.json")
CLAN_DATA_FILE = os.path.join(os.getenv("RENDER_DISK_PATH", "."), "clans.json")
TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

users_data = {}
clans = {}
SEASON_END = datetime(2025, 8, 15).timestamp()

def load_data():
    global users_data, clans
   if os.path.exists(USER_DATA_FILE):
        try:
            with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
                loaded_data = json.load(f)
                users_data = {int(user_id): data for user_id, data in loaded_data.items()}
                for user_id, data in users_data.items():
                    data.setdefault("autoclicker", False)
                    data.setdefault("autoclicker_level", 0)
                    data.setdefault("case_bonus", 0)
                    data.setdefault("achievements", {
                        "clicker_novice": 0,
                        "case_master": 0,
                        "rich": 0,
                        "clan_hero": 0,
                        "lottery_magnate": 0,
                        "referral_leader": 0
                    })
                    data.setdefault("referrals", 0)
                    data.setdefault("daily_tasks", {
                        "clicks": 0,
                        "cases": 0,
                        "upgrade": 0,
                        "referral": 0,
                        "clan_clicks": 0,
                        "last_reset": 0
                    })
                    data.setdefault("daily_clicks", 0)
                    data.setdefault("clan_id", None)
                    data.setdefault("last_promo", 0)
                    data.setdefault("last_click_time", 0)
                    data.setdefault("last_lottery", 0)
                    data.setdefault("coins", 0)
                    data.setdefault("tag", None)
                    data.setdefault("click_booster", 0)
                    data.setdefault("last_message_text", "")
                    data.setdefault("last_reply_markup", None)
                    data.setdefault("clan_clicks_contributed", 0)
                    data.setdefault("cases_opened", 0)
                    data.setdefault("lottery_wins", 0)
            print(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {USER_DATA_FILE}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}")
            save_data()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
            users_data = {}
            save_data()
    else:
        print(f"–§–∞–π–ª {USER_DATA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")
        users_data = {}
        save_data()

    # üî• –í–ù–ò–ú–ê–ù–ò–ï: –í–æ—Ç —Ç—É—Ç –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç—Å—Ç—É–ø–∞!
   if os.path.exists(CLAN_DATA_FILE):
        try:
            with open(CLAN_DATA_FILE, "r", encoding="utf-8") as f:
                clans = json.load(f)
                for clan_id in clans:
                    clans[clan_id].setdefault("clan_clicks", 0)
                    clans[clan_id].setdefault("clan_tag", None)
                    clans[clan_id].setdefault("clan_booster", 0)
                    clans[clan_id].setdefault("clan_autoclicker", 0)
            print(f"–î–∞–Ω–Ω—ã–µ –∫–ª–∞–Ω–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {CLAN_DATA_FILE}. –ö–ª–∞–Ω–æ–≤: {len(clans)}")
            save_data()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤: {str(e)}")
            clans = {}
            save_data()
    else:
        print(f"–§–∞–π–ª {CLAN_DATA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")
        clans = {}
        save_data()

   if os.path.exists(CLAN_DATA_FILE):
    try:
        with open(CLAN_DATA_FILE, "r", encoding="utf-8") as f:
            clans = json.load(f)
            for clan_id in clans:
                clans[clan_id].setdefault("clan_clicks", 0)
                clans[clan_id].setdefault("clan_tag", None)
                clans[clan_id].setdefault("clan_booster", 0)
                clans[clan_id].setdefault("clan_autoclicker", 0)
        print(f"–î–∞–Ω–Ω—ã–µ –∫–ª–∞–Ω–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {CLAN_DATA_FILE}. –ö–ª–∞–Ω–æ–≤: {len(clans)}")
        save_data()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤: {str(e)}")
        clans = {}
else:
    print(f"–§–∞–π–ª {CLAN_DATA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")
    clans = {}
    save_data()

def save_data():
    try:
        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(USER_DATA_FILE), exist_ok=True)
        with open(USER_DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(users_data, f, ensure_ascii=False, indent=4)
        with open(CLAN_DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(clans, f, ensure_ascii=False, indent=4)
        print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {USER_DATA_FILE} –∏ {CLAN_DATA_FILE}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

def get_user(user_id):
    if user_id not in users_data:
        users_data[user_id] = {
            "clicks": 0,
            "username": None,
            "click_multiplier": 1,
            "upgrade_level": 0,
            "last_daily_reward": 0,
            "autoclicker": False,
            "case_bonus": 0,
            "achievements": {"clicker_novice": 0, "case_master": 0, "rich": 0},
            "referrals": 0,
            "daily_tasks": {"clicks": 0, "cases": 0, "upgrade": 0, "last_reset": 0},
            "daily_clicks": 0,
            "clan_id": None,
            "last_promo": 0,
            "last_click_time": 0,
            "last_message_text": "",
            "last_reply_markup": None
        }
        save_data()
    return users_data[user_id]

def get_clan(clan_id):
    if clan_id not in clans:
        clans[clan_id] = {"name": clan_id, "clicks": 0, "members": []}
        save_data()
    return clans[clan_id]

def get_upgrade_cost(user):
    return math.ceil(10 * (1.15 ** user["upgrade_level"]))  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 1.5 –Ω–∞ 1.15

def get_case_reward(case_type, case_bonus):
    rewards = {
        "common": [100, 500, 1000, 2000],
        "epic": [1000, 2500, 5000, 10000],
        "legendary": [5000, 10000, 25000, 50000]
    }
    weights = {
        "common": [0.40, 0.30, 0.20, 0.10 + case_bonus],
        "epic": [0.40, 0.30, 0.20, 0.10 + case_bonus],
        "legendary": [0.40, 0.30, 0.20, 0.10 + case_bonus]
    }
    return random.choices(rewards[case_type], weights[case_type], k=1)[0]

def get_progress_bar(progress, total, length=10):
    filled = int(length * progress / total)
    return "‚ñà" * filled + "‚ñ°" * (length - filled)

def check_achievements(user):
    achievements = user["achievements"]
    rewards = []
    if achievements["clicker_novice"] < 100 and user["clicks"] >= 100:
        achievements["clicker_novice"] = 100
        user["clicks"] += 500
        rewards.append("üåü –ö–ª–∏–∫–µ—Ä-–Ω–æ–≤–∏—á–æ–∫: +500 –∫–ª–∏–∫–æ–≤!")
    if achievements["case_master"] < 5 and user.get("cases_opened", 0) >= 5:
        achievements["case_master"] = 5
        user["clicks"] += 1000
        rewards.append("üéÅ –ú–∞—Å—Ç–µ—Ä –∫–µ–π—Å–æ–≤: +1000 –∫–ª–∏–∫–æ–≤!")
    if achievements["rich"] < 5000 and user["clicks"] >= 5000:
        achievements["rich"] = 5000
        user["clicks"] += 2000
        rewards.append("üí∞ –ë–æ–≥–∞—á: +2000 –∫–ª–∏–∫–æ–≤!")
    return rewards

def reset_daily_tasks(user):
    current_time = time.time()
    if current_time - user["daily_tasks"]["last_reset"] >= 86400:
        user["daily_tasks"] = {"clicks": 0, "cases": 0, "upgrade": 0, "last_reset": current_time}
        save_data()

def get_main_keyboard(user_id):
    user = get_user(user_id)
    upgrade_cost = get_upgrade_cost(user)
    kb = InlineKeyboardBuilder()
    kb.button(text="üñ±Ô∏è –ö–ª–∏–∫ ‚ö°", callback_data="click")
    kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà", callback_data="stats")
    kb.button(text="üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ ü•á", callback_data="leaderboard")
    kb.button(text=f"üîß –£–ª—É—á—à–µ–Ω–∏–µ (+{user['upgrade_level'] + 2} –∑–∞ {upgrade_cost} üíé)", callback_data="upgrade")
    kb.button(text="üéÅ –ö–µ–π—Å—ã üéâ", callback_data="select_case")
    kb.button(text="üéà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–∏–∑ üéÅ", callback_data="daily_reward")
    kb.button(text="üè¨ –ú–∞–≥–∞–∑–∏–Ω üõí", callback_data="shop")
    kb.button(text="üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üèÜ", callback_data="achievements")
    kb.button(text="üîë –ü—Ä–æ–º–æ–∫–æ–¥—ã üéüÔ∏è", callback_data="promo")
    kb.button(text="üë• –ö–ª–∞–Ω ü§ù", callback_data="clan")
    kb.button(text="üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å üî•", callback_data="activity")
    kb.adjust(2)
    return kb.as_markup()

async def set_bot_commands():
    commands = [
        BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üöÄ"),
        BotCommand(command="/stats", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∫–ª–∏–∫–∏ üìä"),
        BotCommand(command="/leaderboard", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ üèÜ"),
        BotCommand(command="/referral", description="–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É üîó"),
        BotCommand(command="/create_clan", description="–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω üë•"),
        BotCommand(command="/join_clan", description="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–ª–∞–Ω—É ü§ù"),
        BotCommand(command="/promo", description="–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ üéüÔ∏è")
    ]
    await bot.set_my_commands(commands)

async def autoclicker_task(user_id):
    user = get_user(user_id)
    while user["autoclicker"]:
        user["clicks"] += 10
        if user["clan_id"]:
            get_clan(user["clan_id"])["clicks"] += 10
        save_data()
        await asyncio.sleep(10)

@dp.message_handler(commands=["start"])
async def start(message: Message):
    args = message.text.split()
    user = get_user(message.from_user.id)
    user["username"] = message.from_user.username or message.from_user.first_name
    if len(args) > 1 and args[1].startswith("ref_"):
        referrer_id = int(args[1].replace("ref_", ""))
        if referrer_id != message.from_user.id and referrer_id in users_data:
            users_data[referrer_id]["referrals"] += 1
            users_data[referrer_id]["clicks"] += 1000
            user["clicks"] += 1000
            save_data()
    save_data()
    user["last_message_text"] = ""
    user["last_reply_markup"] = None
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª–∏–∫–µ—Ä! üéÆ\n{'üåü –°–µ–∑–æ–Ω: –¥–≤–æ–π–Ω—ã–µ –∫–ª–∏–∫–∏ –¥–æ 15 –∞–≤–≥—É—Å—Ç–∞! üåü' if time.time() < SEASON_END else ''}",
        reply_markup=get_main_keyboard(message.from_user.id)
    )

@dp.message_handler(commands=["stats"])
async def stats(message: Message):
    user = get_user(message.from_user.id)
    reset_daily_tasks(user)
    task_progress = user["daily_tasks"]
    achievement_text = (
        f"üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
        f"üåü –ö–ª–∏–∫–µ—Ä-–Ω–æ–≤–∏—á–æ–∫: {get_progress_bar(user['achievements']['clicker_novice'], 100)} {user['achievements']['clicker_novice']}/100\n"
        f"üéÅ –ú–∞—Å—Ç–µ—Ä –∫–µ–π—Å–æ–≤: {get_progress_bar(user.get('cases_opened', 0), 5)} {user.get('cases_opened', 0)}/5\n"
        f"üí∞ –ë–æ–≥–∞—á: {get_progress_bar(user['clicks'], 5000)} {min(user['clicks'], 5000)}/5000"
    )
    message_text = (
        f"üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> üìà\n"
        f"üíé –ö–ª–∏–∫–æ–≤: {user['clicks']}\n"
        f"üîß –£—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è: {user['upgrade_level']}\n"
        f"üñ±Ô∏è –ö–ª–∏–∫–æ–≤ –∑–∞ –Ω–∞–∂–∞—Ç–∏–µ: +{user['click_multiplier']}\n"
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user['referrals']}\n"
        f"ü§ù –ö–ª–∞–Ω: {clans[user['clan_id']]['name'] if user['clan_id'] else '–ù–µ—Ç'}\n"
        f"üìã <b>–ó–∞–¥–∞–Ω–∏—è</b>:\n"
        f"‚úÖ –°–¥–µ–ª–∞—Ç—å 50 –∫–ª–∏–∫–æ–≤: {task_progress['clicks']}/50 (+500 –∫–ª–∏–∫–æ–≤)\n"
        f"üéÅ –û—Ç–∫—Ä—ã—Ç—å 2 –∫–µ–π—Å–∞: {task_progress['cases']}/2 (+1000 –∫–ª–∏–∫–æ–≤)\n"
        f"üîß –ö—É–ø–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ: {task_progress['upgrade']}/1 (+300 –∫–ª–∏–∫–æ–≤)\n"
        f"{achievement_text}"
    )
    reply_markup = get_main_keyboard(message.from_user.id)
    user["last_message_text"] = message_text
    user["last_reply_markup"] = reply_markup
    save_data()
    await message.answer(message_text, reply_markup=reply_markup)

@dp.message_handler(commands=["leaderboard"])
async def leaderboard(message: Message):
    if not users_data:
        await message.answer("üìâ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç, –Ω–∏–∫—Ç–æ –µ—â—ë –Ω–µ –∫–ª–∏–∫–∞–ª! üò¢")
        return
    sorted_users = sorted(users_data.items(), key=lambda x: x[1]["clicks"], reverse=True)
    leaderboard_text = "üèÜ <b>–õ–∏–¥–µ—Ä–±–æ—Ä–¥ (–¢–æ–ø-5)</b> ü•á\n\n"
    for i, (user_id, data) in enumerate(sorted_users[:5], 1):
        leaderboard_text += f"{i}. {data['username'] or '–ê–Ω–æ–Ω–∏–º'}: {data['clicks']} –∫–ª–∏–∫–æ–≤ üíé\n"
    user = get_user(message.from_user.id)
    user["last_message_text"] = leaderboard_text
    user["last_reply_markup"] = None
    save_data()
    await message.answer(leaderboard_text)

@dp.message_handler(commands=["referral"])
async def referral(message: Message):
    user_id = message.from_user.id
    await message.answer(f"üîó <b>–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>: t.me/YourBot?start=ref_{user_id}\n–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–æ 1000 –∫–ª–∏–∫–æ–≤! üë•")

@dp.message_handler(commands=["create_clan"])
async def create_clan(message: Message):
    user = get_user(message.from_user.id)
    if user["clan_id"]:
        await message.answer("‚ùå –¢—ã —É–∂–µ –≤ –∫–ª–∞–Ω–µ! üòï")
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞: /create_clan –ù–∞–∑–≤–∞–Ω–∏–µ üìù")
        return
    clan_name = args[1]
    if clan_name in clans:
        await message.answer("‚ùå –ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! üò¢")
        return
    clans[clan_name] = {"name": clan_name, "clicks": 0, "members": [message.from_user.id]}
    user["clan_id"] = clan_name
    save_data()
    await message.answer(f"‚úÖ –ö–ª–∞–Ω '{clan_name}' —Å–æ–∑–¥–∞–Ω! üéâ")

@dp.message_handler(commands=["join_clan"])
async def join_clan(message: Message):
    user = get_user(message.from_user.id)
    if user["clan_id"]:
        await message.answer("‚ùå –¢—ã —É–∂–µ –≤ –∫–ª–∞–Ω–µ! üòï")
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞: /join_clan –ù–∞–∑–≤–∞–Ω–∏–µ üìù")
        return
    clan_name = args[1]
    if clan_name not in clans:
        await message.answer("‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! üò¢")
        return
    clans[clan_name]["members"].append(message.from_user.id)
    user["clan_id"] = clan_name
    save_data()
    await message.answer(f"‚úÖ –¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–ª–∞–Ω—É '{clan_name}'! ü§ù")

@dp.message_handler(commands=["promo"])
async def promo(message: Message):
    user = get_user(message.from_user.id)
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏ –ø—Ä–æ–º–æ–∫–æ–¥: /promo –∫–æ–¥ üéüÔ∏è")
        return
    promo_code = args[1]
    current_time = time.time()
    cooldown = 86400
    if user["last_promo"] != 0 and (current_time - user["last_promo"]) < cooldown:
        remaining_time = int(cooldown - (current_time - user["last_promo"]))
        hours, remainder = divmod(remaining_time, 3600)
        minutes, seconds = divmod(remainder, 60)
        await message.answer(
            f"‚è≥ –ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ {hours} —á {minutes} –º–∏–Ω {seconds} —Å–µ–∫! ‚è∞"
        )
        return
    if promo_code == "241122":
        user["clicks"] += 5000
        if user["clan_id"]:
            get_clan(user["clan_id"])["clicks"] += 5000
        user["last_promo"] = current_time
        rewards = check_achievements(user)
        save_data()
        message_text = f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! +5000 –∫–ª–∏–∫–æ–≤! üíé\n–í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {user['clicks']}"
        if rewards:
            message_text += "\n" + "\n".join(rewards)
        user["last_message_text"] = message_text
        user["last_reply_markup"] = get_main_keyboard(message.from_user.id)
        await message.answer(message_text, reply_markup=user["last_reply_markup"])
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥! üò¢")
from aiogram.types import CallbackQuery
@dp.callback_query_handler(lambda c: c.data == "click")
async def handle_click(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    current_time = time.time()
    if current_time - user["last_click_time"] < 0.5:
        await callback_query.answer("‚è≥ –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ. ‚è∞")
        return
    user["last_click_time"] = current_time
    multiplier = user["click_multiplier"] * (2 if time.time() < SEASON_END else 1)
    if user["clan_id"]:
        multiplier *= 1.1
    user["clicks"] += multiplier
    user["daily_clicks"] += multiplier
    user["daily_tasks"]["clicks"] += 1
    if user["daily_tasks"]["clicks"] >= 50 and user["daily_tasks"]["clicks"] <= 51:
        user["clicks"] += 500
        user["daily_tasks"]["clicks"] = 51
    if user["clan_id"]:
        get_clan(user["clan_id"])["clicks"] += multiplier
    rewards = check_achievements(user)
    save_data()
    message_text = f"üñ±Ô∏è –ö–ª–∏–∫! –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {user['clicks']} üíé"
    if rewards:
        message_text += "\n" + "\n".join(rewards)
    if user["daily_tasks"]["clicks"] == 51:
        message_text += "\nüéØ –ó–∞–¥–∞–Ω–∏–µ '50 –∫–ª–∏–∫–æ–≤' –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +500 –∫–ª–∏–∫–æ–≤! üéâ"
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "stats")
async def handle_stats(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    reset_daily_tasks(user)
    achievement_text = (
        f"üèÖ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>:\n"
        f"üåü –ö–ª–∏–∫–µ—Ä-–Ω–æ–≤–∏—á–æ–∫: {get_progress_bar(user['achievements']['clicker_novice'], 100)} {user['achievements']['clicker_novice']}/100\n"
        f"üéÅ –ú–∞—Å—Ç–µ—Ä –∫–µ–π—Å–æ–≤: {get_progress_bar(user.get('cases_opened', 0), 5)} {user.get('cases_opened', 0)}/5\n"
        f"üí∞ –ë–æ–≥–∞—á: {get_progress_bar(user['clicks'], 5000)} {min(user['clicks'], 5000)}/5000"
    )
    message_text = (
        f"üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> üìà\n"
        f"üíé –ö–ª–∏–∫–æ–≤: {user['clicks']}\n"
        f"üîß –£—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è: {user['upgrade_level']}\n"
        f"üñ±Ô∏è –ö–ª–∏–∫–æ–≤ –∑–∞ –Ω–∞–∂–∞—Ç–∏–µ: +{user['click_multiplier']}\n"
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user['referrals']}\n"
        f"ü§ù –ö–ª–∞–Ω: {clans[user['clan_id']]['name'] if user['clan_id'] else '–ù–µ—Ç'}\n"
        f"üìã <b>–ó–∞–¥–∞–Ω–∏—è</b>:\n"
        f"‚úÖ –°–¥–µ–ª–∞—Ç—å 50 –∫–ª–∏–∫–æ–≤: {user['daily_tasks']['clicks']}/50 (+500 –∫–ª–∏–∫–æ–≤)\n"
        f"üéÅ –û—Ç–∫—Ä—ã—Ç—å 2 –∫–µ–π—Å–∞: {user['daily_tasks']['cases']}/2 (+1000 –∫–ª–∏–∫–æ–≤)\n"
        f"üîß –ö—É–ø–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ: {user['daily_tasks']['upgrade']}/1 (+300 –∫–ª–∏–∫–æ–≤)\n"
        f"{achievement_text}"
    )
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "leaderboard")
async def handle_leaderboard(callback_query: CallbackQuery):
    if not users_data:
        message_text = "üìâ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç, –Ω–∏–∫—Ç–æ –µ—â—ë –Ω–µ –∫–ª–∏–∫–∞–ª! üò¢"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        user = get_user(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    sorted_users = sorted(users_data.items(), key=lambda x: x[1]["clicks"], reverse=True)
    message_text = "üèÜ <b>–õ–∏–¥–µ—Ä–±–æ—Ä–¥ (–¢–æ–ø-5)</b> ü•á\n\n"
    for i, (user_id, data) in enumerate(sorted_users[:5], 1):
        message_text += f"{i}. {data['username'] or '–ê–Ω–æ–Ω–∏–º'}: {data['clicks']} –∫–ª–∏–∫–æ–≤ üíé\n"
    user = get_user(callback_query.from_user.id)
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "upgrade")
async def handle_upgrade(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    upgrade_cost = get_upgrade_cost(user)
    if user["clicks"] < upgrade_cost:
        message_text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–∫–æ–≤! –ù—É–∂–Ω–æ {upgrade_cost} –∫–ª–∏–∫–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è. üò¢"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    user["clicks"] -= upgrade_cost
    user["upgrade_level"] += 1
    user["click_multiplier"] = user["upgrade_level"] + 1
    user["daily_tasks"]["upgrade"] += 1
    if user["daily_tasks"]["upgrade"] == 1:
        user["clicks"] += 300
    rewards = check_achievements(user)
    save_data()
    message_text = f"üîß –£–ª—É—á—à–µ–Ω–∏–µ –∫—É–ø–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å +{user['click_multiplier']} –∫–ª–∏–∫–æ–≤ –∑–∞ –Ω–∞–∂–∞—Ç–∏–µ! üöÄ"
    if rewards:
        message_text += "\n" + "\n".join(rewards)
    if user["daily_tasks"]["upgrade"] == 1:
        message_text += "\nüéØ –ó–∞–¥–∞–Ω–∏–µ '–ö—É–ø–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ' –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +300 –∫–ª–∏–∫–æ–≤! üéâ"
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "select_case")
async def handle_select_case(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    message_text = "üéÅ <b>–í—ã–±–µ—Ä–∏ –∫–µ–π—Å</b> üéâ:"
    reply_markup = InlineKeyboardBuilder()
    reply_markup.button(text="üéÅ –û–±—ã—á–Ω—ã–π –∫–µ–π—Å (1000 –∫–ª–∏–∫–æ–≤) üü¢", callback_data="case_common")
    reply_markup.button(text="üéÅ –≠–ø–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å (5000 –∫–ª–∏–∫–æ–≤) üîµ", callback_data="case_epic")
    reply_markup.button(text="üéÅ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–µ–π—Å (20000 –∫–ª–∏–∫–æ–≤) üü£", callback_data="case_legendary")
    reply_markup.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    reply_markup.adjust(1)
    reply_markup = reply_markup.as_markup()
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("case_"))
async def handle_case(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    case_type = callback_query.data.split("_")[1]
    case_costs = {"common": 1000, "epic": 5000, "legendary": 20000}
    case_cost = case_costs[case_type]
    if user["clicks"] < case_cost:
        message_text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–∫–æ–≤! –ù—É–∂–Ω–æ {case_cost} –∫–ª–∏–∫–æ–≤ –¥–ª—è –∫–µ–π—Å–∞. üò¢"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    user["clicks"] -= case_cost
    user["cases_opened"] = user.get("cases_opened", 0) + 1
    user["daily_tasks"]["cases"] += 1
    if user["daily_tasks"]["cases"] == 2:
        user["clicks"] += 1000
    reward = get_case_reward(case_type, user["case_bonus"])
    user["clicks"] += reward
    if user["clan_id"]:
        get_clan(user["clan_id"])["clicks"] += reward
    rewards = check_achievements(user)
    save_data()

    # –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
    case_emojis = {"common": "üü¢", "epic": "üîµ", "legendary": "üü£"}
    await callback_query.message.edit_text(f"{case_emojis[case_type]} –û—Ç–∫—Ä—ã–≤–∞–µ–º {case_type.capitalize()} –∫–µ–π—Å... üéÅ")
    await asyncio.sleep(1)
    await callback_query.message.edit_text(f"{case_emojis[case_type]} –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ... ‚ú®")
    await asyncio.sleep(1)
    message_text = f"{case_emojis[case_type]} –ö–µ–π—Å {case_type.capitalize()} –æ—Ç–∫—Ä—ã—Ç! üéâ –¢—ã –ø–æ–ª—É—á–∏–ª +{reward} –∫–ª–∏–∫–æ–≤! üíé\n–í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {user['clicks']}"
    if rewards:
        message_text += "\n" + "\n".join(rewards)
    if user["daily_tasks"]["cases"] == 2:
        message_text += "\nüéØ –ó–∞–¥–∞–Ω–∏–µ '–û—Ç–∫—Ä—ã—Ç—å 2 –∫–µ–π—Å–∞' –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +1000 –∫–ª–∏–∫–æ–≤! üéâ"
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
        user["last_message_text"] = message_text
        user["last_reply_markup"] = reply_markup
        save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "daily_reward")
async def handle_daily_reward(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    current_time = time.time()
    cooldown = 3600
    if user["last_daily_reward"] != 0 and (current_time - user["last_daily_reward"]) < cooldown:
        remaining_time = int(cooldown - (current_time - user["last_daily_reward"]))
        minutes, seconds = divmod(remaining_time, 60)
        message_text = f"‚è≥ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–∏–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω {seconds} —Å–µ–∫! ‚è∞"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    user["clicks"] += 500
    if user["clan_id"]:
        get_clan(user["clan_id"])["clicks"] += 500
    user["last_daily_reward"] = current_time
    rewards = check_achievements(user)
    save_data()
    message_text = f"üéà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–∏–∑ –ø–æ–ª—É—á–µ–Ω! +500 –∫–ª–∏–∫–æ–≤! üíé\n–í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {user['clicks']}"
    if rewards:
        message_text += "\n" + "\n".join(rewards)
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "shop")
async def handle_shop(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    message_text = "üè¨ <b>–ú–∞–≥–∞–∑–∏–Ω</b> üõí:"
    reply_markup = InlineKeyboardBuilder()
    reply_markup.button(text="üï∞Ô∏è –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä (5000 –∫–ª–∏–∫–æ–≤) ‚ö°", callback_data="buy_autoclicker")
    reply_markup.button(text="üéÅ –ë–æ–Ω—É—Å –∫ –∫–µ–π—Å–∞–º +5% (3000 –∫–ª–∏–∫–æ–≤) ‚ú®", callback_data="buy_case_bonus")
    reply_markup.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    reply_markup.adjust(1)
    reply_markup = reply_markup.as_markup()
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "buy_autoclicker")
async def buy_autoclicker(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    if user["autoclicker"]:
        message_text = "‚ùå –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä —É–∂–µ –∫—É–ø–ª–µ–Ω! üòï"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    if user["clicks"] < 5000:
        message_text = "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–∫–æ–≤! –ù—É–∂–Ω–æ 5000 –∫–ª–∏–∫–æ–≤. üò¢"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    user["clicks"] -= 5000
    user["autoclicker"] = True
    asyncio.create_task(autoclicker_task(callback_query.from_user.id))
    save_data()
    message_text = "üï∞Ô∏è –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –∫—É–ø–ª–µ–Ω! +10 –∫–ª–∏–∫–æ–≤ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥! ‚ö°"
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "buy_case_bonus")
async def buy_case_bonus(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    if user["case_bonus"] >= 0.05:
        message_text = "‚ùå –ë–æ–Ω—É—Å –∫ –∫–µ–π—Å–∞–º —É–∂–µ –∫—É–ø–ª–µ–Ω! üòï"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    if user["clicks"] < 3000:
        message_text = "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–∫–æ–≤! –ù—É–∂–Ω–æ 3000 –∫–ª–∏–∫–æ–≤. üò¢"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    user["clicks"] -= 3000
    user["case_bonus"] = 0.05
    save_data()
    message_text = "üéÅ –ë–æ–Ω—É—Å –∫ –∫–µ–π—Å–∞–º –∫—É–ø–ª–µ–Ω! +5% –∫ —à–∞–Ω—Å—É –±–æ–ª—å—à–∏—Ö –Ω–∞–≥—Ä–∞–¥! ‚ú®"
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "achievements")
async def handle_achievements(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    achievement_text = (
        f"üèÖ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>:\n"
        f"üåü –ö–ª–∏–∫–µ—Ä-–Ω–æ–≤–∏—á–æ–∫: {get_progress_bar(user['achievements']['clicker_novice'], 100)} {user['achievements']['clicker_novice']}/100\n"
        f"üéÅ –ú–∞—Å—Ç–µ—Ä –∫–µ–π—Å–æ–≤: {get_progress_bar(user.get('cases_opened', 0), 5)} {user.get('cases_opened', 0)}/5\n"
        f"üí∞ –ë–æ–≥–∞—á: {get_progress_bar(user['clicks'], 5000)} {min(user['clicks'], 5000)}/5000"
    )
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != achievement_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(achievement_text, reply_markup=reply_markup)
            user["last_message_text"] = achievement_text
            user["last_reply_markup"] = reply_markup
            save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "promo")
async def handle_promo(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    message_text = "üîë –í–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π: /promo 241122\n(–î–æ—Å—Ç—É–ø–Ω–æ —Ä–∞–∑ –≤ 24 —á–∞—Å–∞, –¥–∞—ë—Ç 5000 –∫–ª–∏–∫–æ–≤) üéüÔ∏è"
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "clan")
async def handle_clan(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    if user["clan_id"]:
        clan = get_clan(user["clan_id"])
        message_text = f"üë• <b>–ö–ª–∞–Ω</b>: {clan['name']} ü§ù\nüíé –ö–ª–∏–∫–æ–≤ –∫–ª–∞–Ω–∞: {clan['clicks']}\nüë§ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(clan['members'])}"
    else:
        message_text = "üë• –¢—ã –Ω–µ –≤ –∫–ª–∞–Ω–µ! –ò—Å–ø–æ–ª—å–∑—É–π /create_clan –∏–ª–∏ /join_clan. üò¢"
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "activity")
async def handle_activity(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    if not users_data:
        message_text = "üìâ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—É—Å—Ç! üò¢"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    sorted_users = sorted(users_data.items(), key=lambda x: x[1]["daily_clicks"], reverse=True)
    message_text = "üìà <b>–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–¢–æ–ø-5)</b> üî•:\n\n"
    for i, (user_id, data) in enumerate(sorted_users[:5], 1):
        message_text += f"{i}. {data['username'] or '–ê–Ω–æ–Ω–∏–º'}: {data['daily_clicks']} –∫–ª–∏–∫–æ–≤ –∑–∞ –¥–µ–Ω—å üíé\n"
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "back")
async def handle_back(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    message_text = "üëã –í–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! üéÆ"
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

async def reset_daily_clicks():
    while True:
        for user_id in users_data:
            users_data[user_id]["daily_clicks"] = 0
        sorted_users = sorted(users_data.items(), key=lambda x: x[1]["daily_clicks"], reverse=True)
        for i, (user_id, data) in enumerate(sorted_users[:3], 1):
            if i == 1:
                users_data[user_id]["clicks"] += 5000
            elif i == 2:
                users_data[user_id]["clicks"] += 3000
            elif i == 3:
                users_data[user_id]["clicks"] += 1000
        save_data()
        await asyncio.sleep(86400)
from aiogram import executor
async def set_bot_commands():
    commands = [
        BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="/stats", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"),
        BotCommand(command="/click", description="–ö–ª–∏–∫–Ω—É—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω–µ—Ç")
    ]
    await bot.set_my_commands(commands, scope=BotCommandScopeDefault())

def main():
    load_data()
    dp.loop.create_task(set_bot_commands())
    for user_id in users_data:
        if users_data[user_id].get("autoclicker", False):
            dp.loop.create_task(autoclicker_task(user_id))
    for clan_id in clans:
        if clans[clan_id].get("clan_autoclicker", 0) > 0:
            dp.loop.create_task(clan_autoclicker_task(clan_id))
    dp.loop.create_task(reset_daily_clicks())

if name == "__main__":
    main()
    executor.start_polling(dp, skip_updates=True, timeout=30)
