import asyncio
import math
import json
import os
import random
import time
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, BotCommand
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8065777167:AAFQGwJHGoaXgFkt4DQq7veaMU7IPEWXwHk"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
USER_DATA_FILE = "users_data.json"
CLAN_DATA_FILE = "clans.json"
SEASON_END = datetime(2025, 8, 15).timestamp()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
users_data = {}
clans = {}

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ª–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
save_lock = asyncio.Lock()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def load_data():
    global users_data, clans
    if os.path.exists(USER_DATA_FILE):
        try:
            with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
                loaded_data = json.load(f)
                users_data = {int(user_id): data for user_id, data in loaded_data.items()}
                for user_id, data in users_data.items():
                    data.setdefault("autoclicker", False)
                    data.setdefault("autoclicker_level", 0)
                    data.setdefault("case_bonus", 0)
                    data.setdefault("achievements", {
                        "clicker_novice": 0,
                        "case_master": 0,
                        "rich": 0,
                        "clan_hero": 0,
                        "lottery_magnate": 0,
                        "referral_leader": 0
                    })
                    data.setdefault("referrals", 0)
                    data.setdefault("daily_tasks", {
                        "clicks": 0,
                        "cases": 0,
                        "upgrade": 0,
                        "referral": 0,
                        "clan_clicks": 0,
                        "last_reset": 0
                    })
                    data.setdefault("daily_clicks", 0)
                    data.setdefault("clan_id", None)
                    data.setdefault("last_promo", 0)
                    data.setdefault("last_click_time", 0)
                    data.setdefault("last_lottery", 0)
                    data.setdefault("coins", 0)
                    data.setdefault("tag", None)
                    data.setdefault("click_booster", 0)
                    data.setdefault("last_message_text", "")
                    data.setdefault("last_reply_markup", None)
                    data.setdefault("clan_clicks_contributed", 0)
                    data.setdefault("cases_opened", 0)
                    data.setdefault("lottery_wins", 0)
                print(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {USER_DATA_FILE}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}")
                asyncio.create_task(save_data())  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
            users_data = {}
    else:
        print(f"–§–∞–π–ª {USER_DATA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")
    
    if os.path.exists(CLAN_DATA_FILE):
        try:
            with open(CLAN_DATA_FILE, "r", encoding="utf-8") as f:
                clans = json.load(f)
                for clan_id in clans:
                    clans[clan_id].setdefault("clan_clicks", 0)
                    clans[clan_id].setdefault("clan_tag", None)
                    clans[clan_id].setdefault("clan_booster", 0)
                    clans[clan_id].setdefault("clan_autoclicker", 0)
                print(f"–î–∞–Ω–Ω—ã–µ –∫–ª–∞–Ω–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {CLAN_DATA_FILE}. –ö–ª–∞–Ω–æ–≤: {len(clans)}")
                asyncio.create_task(save_data())  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤: {str(e)}")
            clans = {}
    else:
        print(f"–§–∞–π–ª {CLAN_DATA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")

async def save_data():
    async with save_lock:
        try:
            # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            serializable_users_data = {str(k): v for k, v in users_data.items()}
            for user_id, data in serializable_users_data.items():
                if data.get("last_reply_markup") is not None:
                    data["last_reply_markup"] = None  # –£–¥–∞–ª—è–µ–º –Ω–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã
            with open(USER_DATA_FILE, "w", encoding="utf-8") as f:
                json.dump(serializable_users_data, f, ensure_ascii=False, indent=4)
            
            # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤
            with open(CLAN_DATA_FILE, "w", encoding="utf-8") as f:
                json.dump(clans, f, ensure_ascii=False, indent=4)
            
            print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {USER_DATA_FILE} –∏ {CLAN_DATA_FILE}")
        except PermissionError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        except OSError as e:
            print(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        except TypeError as e:
            print(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON: {str(e)}")
        except Exception as e:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

def get_user(user_id):
    if user_id not in users_data:
        users_data[user_id] = {
            "clicks": 0,
            "coins": 0,
            "username": None,
            "click_multiplier": 1,
            "upgrade_level": 0,
            "last_daily_reward": 0,
            "autoclicker": False,
            "autoclicker_level": 0,
            "case_bonus": 0,
            "achievements": {
                "clicker_novice": 0,
                "case_master": 0,
                "rich": 0,
                "clan_hero": 0,
                "lottery_magnate": 0,
                "referral_leader": 0
            },
            "referrals": 0,
            "daily_tasks": {
                "clicks": 0,
                "cases": 0,
                "upgrade": 0,
                "referral": 0,
                "clan_clicks": 0,
                "last_reset": 0
            },
            "daily_clicks": 0,
            "clan_id": None,
            "last_promo": 0,
            "last_click_time": 0,
            "last_lottery": 0,
            "tag": None,
            "click_booster": 0,
            "clan_clicks_contributed": 0,
            "cases_opened": 0,
            "lottery_wins": 0,
            "last_message_text": "",
            "last_reply_markup": None
        }
        asyncio.create_task(save_data())  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    return users_data[user_id]

def get_clan(clan_id):
    if clan_id not in clans:
        clans[clan_id] = {
            "name": clan_id,
            "clan_clicks": 0,
            "members": [],
            "clan_tag": None,
            "clan_booster": 0,
            "clan_autoclicker": 0
        }
        asyncio.create_task(save_data())  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    return clans[clan_id]

def get_upgrade_cost(user):
    return math.ceil(10 * (1.15 ** user["upgrade_level"]))

def get_autoclicker_cost(user):
    return math.ceil(5000 * (1.2 ** user["autoclicker_level"]))

def get_clan_booster_cost(clan):
    return math.ceil(10000 * (1.3 ** (clan["clan_booster"] > time.time() and 1 or 0)))

def get_clan_autoclicker_cost(clan):
    return math.ceil(20000 * (1.5 ** clan["clan_autoclicker"]))

def get_case_reward(case_type, case_bonus):
    rewards = {
        "common": [(100, 1), (500, 2), (1000, 3), (2000, 5)],
        "epic": [(1000, 3), (2500, 5), (5000, 8), (10000, 10)],
        "legendary": [(5000, 5), (10000, 10), (25000, 15), (50000, 20)]
    }
    weights = {
        "common": [0.40, 0.30, 0.20, 0.10 + case_bonus],
        "epic": [0.40, 0.30, 0.20, 0.10 + case_bonus],
        "legendary": [0.40, 0.30, 0.20, 0.10 + case_bonus]
    }
    reward, coins = random.choices(rewards[case_type], weights=weights[case_type], k=1)[0]
    coin_drop = coins if random.random() < 0.5 else 0
    return reward, coin_drop

def get_lottery_reward():
    if random.random() < 0.5:
        return random.randint(2000, 5000), random.randint(2, 5)
    return 0, 0

def get_progress_bar(progress, total, length=10):
    filled = int(length * progress / total)
    return "‚ñà" * filled + "‚ñ°" * (length - filled)

def check_achievements(user):
    achievements = user["achievements"]
    rewards = []
    if achievements["clicker_novice"] < 500 and user["clicks"] >= 500:
        achievements["clicker_novice"] = 500
        user["clicks"] += 1000
        user["coins"] += 5
        rewards.append("üåü –ö–ª–∏–∫–µ—Ä-–Ω–æ–≤–∏—á–æ–∫: +1000 –∫–ª–∏–∫–æ–≤, +5 –º–æ–Ω–µ—Ç!")
    if achievements["case_master"] < 10 and user.get("cases_opened", 0) >= 10:
        achievements["case_master"] = 10
        user["clicks"] += 2000
        user["coins"] += 10
        rewards.append("üéÅ –ú–∞—Å—Ç–µ—Ä –∫–µ–π—Å–æ–≤: +2000 –∫–ª–∏–∫–æ–≤, +10 –º–æ–Ω–µ—Ç!")
    if achievements["rich"] < 10000 and user["clicks"] >= 10000:
        achievements["rich"] = 10000
        user["clicks"] += 5000
        user["coins"] += 20
        rewards.append("üí∞ –ë–æ–≥–∞—á: +5000 –∫–ª–∏–∫–æ–≤, +20 –º–æ–Ω–µ—Ç!")
    if achievements["clan_hero"] < 1000 and user.get("clan_clicks_contributed", 0) >= 1000:
        achievements["clan_hero"] = 1000
        user["clicks"] += 3000
        user["coins"] += 15
        rewards.append("ü§ù –ö–ª–∞–Ω–æ–≤—ã–π –≥–µ—Ä–æ–π: +3000 –∫–ª–∏–∫–æ–≤, +15 –º–æ–Ω–µ—Ç!")
    if achievements["lottery_magnate"] < 5 and user.get("lottery_wins", 0) >= 5:
        achievements["lottery_magnate"] = 5
        user["clicks"] += 4000
        user["coins"] += 20
        rewards.append("üé∞ –õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –º–∞–≥–Ω–∞—Ç: +4000 –∫–ª–∏–∫–æ–≤, +20 –º–æ–Ω–µ—Ç!")
    if achievements["referral_leader"] < 3 and user["referrals"] >= 3:
        achievements["referral_leader"] = 3
        user["clicks"] += 3000
        user["coins"] += 15
        rewards.append("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä: +3000 –∫–ª–∏–∫–æ–≤, +15 –º–æ–Ω–µ—Ç!")
    return rewards

def reset_daily_tasks(user):
    current_time = time.time()
    if current_time - user["daily_tasks"]["last_reset"] >= 86400:
        user["daily_tasks"] = {
            "clicks": 0,
            "cases": 0,
            "upgrade": 0,
            "referral": 0,
            "clan_clicks": 0,
            "last_reset": current_time
        }
        user["daily_clicks"] = 0
        asyncio.create_task(save_data())  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

def check_resources(user, clicks_needed=0, coins_needed=0, clan_clicks_needed=0):
    missing = []
    if clicks_needed > 0 and user["clicks"] < clicks_needed:
        missing.append(f"{clicks_needed} –∫–ª–∏–∫–æ–≤, —É —Ç–µ–±—è {user['clicks']}. –ó–∞—Ä–∞–±–æ—Ç–∞–π –µ—â—ë {clicks_needed - user['clicks']}!")
    if coins_needed > 0 and user["coins"] < coins_needed:
        missing.append(f"{coins_needed} –º–æ–Ω–µ—Ç, —É —Ç–µ–±—è {user['coins']}. –ó–∞—Ä–∞–±–æ—Ç–∞–π –µ—â—ë {coins_needed - user['coins']}!")
    if clan_clicks_needed > 0 and user["clan_id"]:
        clan = get_clan(user["clan_id"])
        if clan["clan_clicks"] < clan_clicks_needed:
            missing.append(f"{clan_clicks_needed} –∫–ª–∞–Ω–æ–≤—ã—Ö –∫–ª–∏–∫–æ–≤, —É –∫–ª–∞–Ω–∞ {clan['clan_clicks']}. –ó–∞—Ä–∞–±–æ—Ç–∞–π –µ—â—ë {clan_clicks_needed - clan['clan_clicks']}!")
    return missing

def get_main_keyboard(user_id):
    user = get_user(user_id)
    upgrade_cost = get_upgrade_cost(user)
    kb = InlineKeyboardBuilder()
    kb.button(text="üñ±Ô∏è –ö–ª–∏–∫ ‚ö°", callback_data="click")
    kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà", callback_data="stats")
    kb.button(text="üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ ü•á", callback_data="leaderboard")
    kb.button(text=f"üîß –£–ª—É—á—à–µ–Ω–∏–µ (+{user['upgrade_level'] + 2} –∑–∞ {upgrade_cost} üíé)", callback_data="upgrade")
    kb.button(text="üéÅ –ö–µ–π—Å—ã üéâ", callback_data="select_case")
    kb.button(text="üéà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–∏–∑ üéÅ", callback_data="daily_reward")
    kb.button(text="üè¨ –ú–∞–≥–∞–∑–∏–Ω üõí", callback_data="shop")
    kb.button(text="üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üèÜ", callback_data="achievements")
    kb.button(text="üîë –ü—Ä–æ–º–æ–∫–æ–¥—ã üéüÔ∏è", callback_data="promo")
    kb.button(text="üë• –ö–ª–∞–Ω ü§ù", callback_data="clan")
    kb.button(text="üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å üî•", callback_data="activity")
    kb.button(text="üé∞ –õ–æ—Ç–µ—Ä–µ—è üçÄ", callback_data="lottery")
    kb.button(text="üìú –û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã ‚ÑπÔ∏è", callback_data="game_info")
    kb.adjust(2)
    return kb.as_markup()

async def set_bot_commands():
    commands = [
        BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üöÄ"),
        BotCommand(command="/stats", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∫–ª–∏–∫–∏ üìä"),
        BotCommand(command="/leaderboard", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ üèÜ"),
        BotCommand(command="/clan_leaderboard", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∞–Ω–æ–≤ üèÖ"),
        BotCommand(command="/referral", description="–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É üîó"),
        BotCommand(command="/create_clan", description="–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω üë•"),
        BotCommand(command="/join_clan", description="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–ª–∞–Ω—É ü§ù"),
        BotCommand(command="/promo", description="–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ üéüÔ∏è")
    ]
    await bot.set_my_commands(commands)

async def autoclicker_task(user_id):
    user = get_user(user_id)
    last_save_time = time.time()
    while user["autoclicker"]:
        clicks_per_cycle = 10 + 5 * (user["autoclicker_level"] - 1) if user["autoclicker_level"] > 0 else 0
        click_multiplier = 1.5 if user.get("click_booster", 0) > time.time() else 1.0
        user["clicks"] += clicks_per_cycle * click_multiplier
        user["daily_clicks"] += clicks_per_cycle * click_multiplier
        if user["clan_id"]:
            clan = get_clan(user["clan_id"])
            clan_clicks = clicks_per_cycle * 0.1 * (1.1 if clan["clan_booster"] > time.time() else 1.0)
            clan["clan_clicks"] += clan_clicks
            user["clan_clicks_contributed"] = user.get("clan_clicks_contributed", 0) + clan_clicks
            user["daily_tasks"]["clan_clicks"] += clan_clicks
            if user["daily_tasks"]["clan_clicks"] >= 500 and user["daily_tasks"]["clan_clicks"] <= 501:
                user["clicks"] += 1500
                user["coins"] += 8
                user["daily_tasks"]["clan_clicks"] = 501
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥
        if time.time() - last_save_time >= 30:
            await save_data()
            last_save_time = time.time()
        await asyncio.sleep(10)

async def clan_autoclicker_task(clan_id):
    clan = get_clan(clan_id)
    last_save_time = time.time()
    while clan["clan_autoclicker"] > 0:
        clan["clan_clicks"] += 50 * clan["clan_autoclicker"]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥
        if time.time() - last_save_time >= 30:
            await save_data()
            last_save_time = time.time()
        await asyncio.sleep(10)

@dp.message(CommandStart())
async def start(message: Message):
    args = message.text.split()
    user = get_user(message.from_user.id)
    user["username"] = message.from_user.username or message.from_user.first_name
    if len(args) > 1 and args[1].startswith("ref_"):
        referrer_id = int(args[1].replace("ref_", ""))
        if referrer_id != message.from_user.id and referrer_id in users_data:
            users_data[referrer_id]["referrals"] += 1
            users_data[referrer_id]["daily_tasks"]["referral"] += 1
            users_data[referrer_id]["clicks"] += 1000
            users_data[referrer_id]["coins"] += 5
            user["clicks"] += 1000
            user["coins"] += 5
            if users_data[referrer_id]["daily_tasks"]["referral"] == 1:
                users_data[referrer_id]["clicks"] += 1000
                users_data[referrer_id]["coins"] += 10
            await save_data()
    user["last_message_text"] = ""
    user["last_reply_markup"] = None
    await save_data()
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª–∏–∫–µ—Ä! üéÆ\n{'üåü –°–µ–∑–æ–Ω: –¥–≤–æ–π–Ω—ã–µ –∫–ª–∏–∫–∏ –¥–æ 15 –∞–≤–≥—É—Å—Ç–∞! üåü' if time.time() < SEASON_END else ''}",
        reply_markup=get_main_keyboard(message.from_user.id)
    )

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ –≤—ã–∑—ã–≤–∞—é—Ç save_data() –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
# –ü—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ –≤—ã–∑–æ–≤—ã save_data() –Ω–∞ await save_data() –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö.

@dp.message(Command("stats"))
async def stats(message: Message):
    user = get_user(message.from_user.id)
    reset_daily_tasks(user)
    achievement_text = (
        f"üèÖ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>:\n"
        f"üåü –ö–ª–∏–∫–µ—Ä-–Ω–æ–≤–∏—á–æ–∫: {get_progress_bar(user['achievements']['clicker_novice'], 500)} {user['achievements']['clicker_novice']}/500\n"
        f"üéÅ –ú–∞—Å—Ç–µ—Ä –∫–µ–π—Å–æ–≤: {get_progress_bar(user.get('cases_opened', 0), 10)} {user.get('cases_opened', 0)}/10\n"
        f"üí∞ –ë–æ–≥–∞—á: {get_progress_bar(user['clicks'], 10000)} {min(user['clicks'], 10000)}/10000\n"
        f"ü§ù –ö–ª–∞–Ω–æ–≤—ã–π –≥–µ—Ä–æ–π: {get_progress_bar(user.get('clan_clicks_contributed', 0), 1000)} {min(user.get('clan_clicks_contributed', 0), 1000)}/1000\n"
        f"üé∞ –õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –º–∞–≥–Ω–∞—Ç: {get_progress_bar(user.get('lottery_wins', 0), 5)} {user.get('lottery_wins', 0)}/5\n"
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä: {get_progress_bar(user['referrals'], 3)} {user['referrals']}/3"
    )
    message_text = (
        f"üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> üìà\n"
        f"üíé –ö–ª–∏–∫–æ–≤: {user['clicks']}\n"
        f"ü™ô –ú–æ–Ω–µ—Ç: {user['coins']}\n"
        f"üîß –£—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è: {user['upgrade_level']}\n"
        f"üñ±Ô∏è –ö–ª–∏–∫–æ–≤ –∑–∞ –Ω–∞–∂–∞—Ç–∏–µ: +{user['click_multiplier']}\n"
        f"üï∞Ô∏è –£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞: {user['autoclicker_level']} (+{10 + 5 * (user['autoclicker_level'] - 1) if user['autoclicker_level'] > 0 else 0} –∫–ª–∏–∫–æ–≤/10 —Å–µ–∫)\n"
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user['referrals']}\n"
        f"ü§ù –ö–ª–∞–Ω: {clans[user['clan_id']]['name'] if user['clan_id'] else '–ù–µ—Ç'}\n"
        f"üìã <b>–ó–∞–¥–∞–Ω–∏—è</b>:\n"
        f"‚úÖ –°–¥–µ–ª–∞—Ç—å 100 –∫–ª–∏–∫–æ–≤: {user['daily_tasks']['clicks']}/100 (+1000 –∫–ª–∏–∫–æ–≤, +5 –º–æ–Ω–µ—Ç)\n"
        f"üéÅ –û—Ç–∫—Ä—ã—Ç—å 3 –∫–µ–π—Å–∞: {user['daily_tasks']['cases']}/3 (+2000 –∫–ª–∏–∫–æ–≤, +10 –º–æ–Ω–µ—Ç)\n"
        f"üîß –ö—É–ø–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ: {user['daily_tasks']['upgrade']}/1 (+500 –∫–ª–∏–∫–æ–≤, +5 –º–æ–Ω–µ—Ç)\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {user['daily_tasks']['referral']}/1 (+1000 –∫–ª–∏–∫–æ–≤, +10 –º–æ–Ω–µ—Ç)\n"
        f"ü§ù 500 –∫–ª–∞–Ω–æ–≤—ã—Ö –∫–ª–∏–∫–æ–≤: {user['daily_tasks']['clan_clicks']}/500 (+1500 –∫–ª–∏–∫–æ–≤, +8 –º–æ–Ω–µ—Ç)\n"
        f"{achievement_text}"
    )
    reply_markup = get_main_keyboard(message.from_user.id)
    user["last_message_text"] = message_text
    user["last_reply_markup"] = reply_markup
    await save_data()
    await message.answer(message_text, reply_markup=reply_markup)

@dp.message(Command("leaderboard"))
async def leaderboard(message: Message):
    if not users_data:
        await message.answer("üìâ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç, –Ω–∏–∫—Ç–æ –µ—â—ë –Ω–µ –∫–ª–∏–∫–∞–ª! üò¢")
        return
    sorted_users = sorted(users_data.items(), key=lambda x: x[1]["clicks"], reverse=True)
    leaderboard_text = "üèÜ <b>–õ–∏–¥–µ—Ä–±–æ—Ä–¥ (–¢–æ–ø-5)</b> ü•á\n\n"
    for i, (user_id, data) in enumerate(sorted_users[:5], 1):
        tag = f" [{data['tag']}]" if data["tag"] else ""
        leaderboard_text += f"{i}. {data['username'] or '–ê–Ω–æ–Ω–∏–º'}{tag}: {data['clicks']} –∫–ª–∏–∫–æ–≤ üíé\n"
    user = get_user(message.from_user.id)
    user["last_message_text"] = leaderboard_text
    user["last_reply_markup"] = get_main_keyboard(message.from_user.id)
    await save_data()
    await message.answer(leaderboard_text, reply_markup=user["last_reply_markup"])

@dp.message(Command("clan_leaderboard"))
async def clan_leaderboard(message: Message):
    if not clans:
        await message.answer("üìâ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –∫–ª–∞–Ω–æ–≤ –ø—É—Å—Ç, –Ω–∏ –æ–¥–∏–Ω –∫–ª–∞–Ω –Ω–µ —Å–æ–∑–¥–∞–Ω! üò¢")
        return
    sorted_clans = sorted(clans.items(), key=lambda x: x[1]["clan_clicks"], reverse=True)
    leaderboard_text = "üèÖ <b>–¢–æ–ø –∫–ª–∞–Ω–æ–≤ (–¢–æ–ø-5)</b> üèÜ\n\n"
    for i, (clan_id, data) in enumerate(sorted_clans[:5], 1):
        tag = f" [{data['clan_tag']}]" if data["clan_tag"] else ""
        leaderboard_text += f"{i}. {data['name']}{tag}: {data['clan_clicks']} –∫–ª–∞–Ω–æ–≤—ã—Ö –∫–ª–∏–∫–æ–≤ ü§ù\n"
    user = get_user(message.from_user.id)
    user["last_message_text"] = leaderboard_text
    user["last_reply_markup"] = get_main_keyboard(message.from_user.id)
    await save_data()
    await message.answer(leaderboard_text, reply_markup=user["last_reply_markup"])

@dp.message(Command("referral"))
async def referral(message: Message):
    user_id = message.from_user.id
    await message.answer(f"üîó <b>–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>: t.me/YourBot?start=ref_{user_id}\n–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–æ 1000 –∫–ª–∏–∫–æ–≤ –∏ 5 –º–æ–Ω–µ—Ç! üë•")

@dp.message(Command("create_clan"))
async def create_clan(message: Message):
    user = get_user(message.from_user.id)
    if user["clan_id"]:
        await message.answer("‚ùå –¢—ã —É–∂–µ –≤ –∫–ª–∞–Ω–µ! üòï")
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞: /create_clan –ù–∞–∑–≤–∞–Ω–∏–µ üìù")
        return
    clan_name = args[1]
    if clan_name in clans:
        await message.answer("‚ùå –ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! üò¢")
        return
    clans[clan_name] = {
        "name": clan_name,
        "clan_clicks": 0,
        "members": [message.from_user.id],
        "clan_tag": None,
        "clan_booster": 0,
        "clan_autoclicker": 0
    }
    user["clan_id"] = clan_name
    await save_data()
    await message.answer(f"‚úÖ –ö–ª–∞–Ω '{clan_name}' —Å–æ–∑–¥–∞–Ω! üéâ")

@dp.message(Command("join_clan"))
async def join_clan(message: Message):
    user = get_user(message.from_user.id)
    if user["clan_id"]:
        await message.answer("‚ùå –¢—ã —É–∂–µ –≤ –∫–ª–∞–Ω–µ! üòï")
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞: /join_clan –ù–∞–∑–≤–∞–Ω–∏–µ üìù")
        return
    clan_name = args[1]
    if clan_name not in clans:
        await message.answer("‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! üò¢")
        return
    clans[clan_name]["members"].append(message.from_user.id)
    user["clan_id"] = clan_name
    await save_data()
    await message.answer(f"‚úÖ –¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–ª–∞–Ω—É '{clan_name}'! ü§ù")

@dp.message(Command("promo"))
async def promo(message: Message):
    user = get_user(message.from_user.id)
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏ –ø—Ä–æ–º–æ–∫–æ–¥: /promo –∫–æ–¥ üéüÔ∏è")
        return
    promo_code = args[1]
    current_time = time.time()
    cooldown = 86400
    if user["last_promo"] != 0 and (current_time - user["last_promo"]) < cooldown:
        remaining_time = int(cooldown - (current_time - user["last_promo"]))
        hours, remainder = divmod(remaining_time, 3600)
        minutes, seconds = divmod(remainder, 60)
        await message.answer(
            f"‚è≥ –ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ {hours} —á {minutes} –º–∏–Ω {seconds} —Å–µ–∫! ‚è∞"
        )
        return
    if promo_code == "241122":
        user["clicks"] += 5000
        user["coins"] += 10
        if user["clan_id"]:
            get_clan(user["clan_id"])["clan_clicks"] += 5000
        user["last_promo"] = current_time
        rewards = check_achievements(user)
        await save_data()
        message_text = f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! +5000 –∫–ª–∏–∫–æ–≤, +10 –º–æ–Ω–µ—Ç! üíéü™ô\n–í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {user['clicks']}, –º–æ–Ω–µ—Ç: {user['coins']}"
        if rewards:
            message_text += "\n" + "\n".join(rewards)
        user["last_message_text"] = message_text
        user["last_reply_markup"] = get_main_keyboard(message.from_user.id)
        await message.answer(message_text, reply_markup=user["last_reply_markup"])
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥! üò¢")

@dp.callback_query(lambda c: c.data == "click")
async def handle_click(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    current_time = time.time()
    if current_time - user["last_click_time"] < 0.5:
        await callback_query.answer("‚è≥ –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ. ‚è∞")
        return
    user["last_click_time"] = current_time
    multiplier = user["click_multiplier"] * (2 if time.time() < SEASON_END else 1) * (1.5 if user.get("click_booster", 0) > current_time else 1.0)
    if user["clan_id"]:
        multiplier *= 1.1
    user["clicks"] += multiplier
    user["daily_clicks"] += multiplier
    user["daily_tasks"]["clicks"] += 1
    if user["daily_tasks"]["clicks"] >= 100 and user["daily_tasks"]["clicks"] <= 101:
        user["clicks"] += 1000
        user["coins"] += 5
        user["daily_tasks"]["clicks"] = 101
    if user["clan_id"]:
        clan = get_clan(user["clan_id"])
        clan_clicks = multiplier * 0.1 * (1.1 if clan["clan_booster"] > time.time() else 1.0)
        clan["clan_clicks"] += clan_clicks
        user["clan_clicks_contributed"] = user.get("clan_clicks_contributed", 0) + clan_clicks
        user["daily_tasks"]["clan_clicks"] += clan_clicks
        if user["daily_tasks"]["clan_clicks"] >= 500 and user["daily_tasks"]["clan_clicks"] <= 501:
            user["clicks"] += 1500
            user["coins"] += 8
            user["daily_tasks"]["clan_clicks"] = 501
    rewards = check_achievements(user)
    await save_data()
    message_text = f"üñ±Ô∏è –ö–ª–∏–∫! –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {user['clicks']} üíé, –º–æ–Ω–µ—Ç: {user['coins']} ü™ô"
    if rewards:
        message_text += "\n" + "\n".join(rewards)
    if user["daily_tasks"]["clicks"] == 101:
        message_text += "\nüéØ –ó–∞–¥–∞–Ω–∏–µ '100 –∫–ª–∏–∫–æ–≤' –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +1000 –∫–ª–∏–∫–æ–≤, +5 –º–æ–Ω–µ—Ç! üéâ"
    if user["daily_tasks"]["clan_clicks"] == 501:
        message_text += "\nüéØ –ó–∞–¥–∞–Ω–∏–µ '500 –∫–ª–∞–Ω–æ–≤—ã—Ö –∫–ª–∏–∫–æ–≤' –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +1500 –∫–ª–∏–∫–æ–≤, +8 –º–æ–Ω–µ—Ç! üéâ"
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            await save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∑–∞–º–µ–Ω—è—è save_data() –Ω–∞ await save_data()

@dp.callback_query(lambda c: c.data == "stats")
async def handle_stats(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    reset_daily_tasks(user)
    achievement_text = (
        f"üèÖ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>:\n"
        f"üåü –ö–ª–∏–∫–µ—Ä-–Ω–æ–≤–∏—á–æ–∫: {get_progress_bar(user['achievements']['clicker_novice'], 500)} {user['achievements']['clicker_novice']}/500\n"
        f"üéÅ –ú–∞—Å—Ç–µ—Ä –∫–µ–π—Å–æ–≤: {get_progress_bar(user.get('cases_opened', 0), 10)} {user.get('cases_opened', 0)}/10\n"
        f"üí∞ –ë–æ–≥–∞—á: {get_progress_bar(user['clicks'], 10000)} {min(user['clicks'], 10000)}/10000\n"
        f"ü§ù –ö–ª–∞–Ω–æ–≤—ã–π –≥–µ—Ä–æ–π: {get_progress_bar(user.get('clan_clicks_contributed', 0), 1000)} {min(user.get('clan_clicks_contributed', 0), 1000)}/1000\n"
        f"üé∞ –õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –º–∞–≥–Ω–∞—Ç: {get_progress_bar(user.get('lottery_wins', 0), 5)} {user.get('lottery_wins', 0)}/5\n"
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä: {get_progress_bar(user['referrals'], 3)} {user['referrals']}/3"
    )
    message_text = (
        f"üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> üìà\n"
        f"üíé –ö–ª–∏–∫–æ–≤: {user['clicks']}\n"
        f"ü™ô –ú–æ–Ω–µ—Ç: {user['coins']}\n"
        f"üîß –£—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è: {user['upgrade_level']}\n"
        f"üñ±Ô∏è –ö–ª–∏–∫–æ–≤ –∑–∞ –Ω–∞–∂–∞—Ç–∏–µ: +{user['click_multiplier']}\n"
        f"üï∞Ô∏è –£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞: {user['autoclicker_level']} (+{10 + 5 * (user['autoclicker_level'] - 1) if user['autoclicker_level'] > 0 else 0} –∫–ª–∏–∫–æ–≤/10 —Å–µ–∫)\n"
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user['referrals']}\n"
        f"ü§ù –ö–ª–∞–Ω: {clans[user['clan_id']]['name'] if user['clan_id'] else '–ù–µ—Ç'}\n"
        f"üìã <b>–ó–∞–¥–∞–Ω–∏—è</b>:\n"
        f"‚úÖ –°–¥–µ–ª–∞—Ç—å 100 –∫–ª–∏–∫–æ–≤: {user['daily_tasks']['clicks']}/100 (+1000 –∫–ª–∏–∫–æ–≤, +5 –º–æ–Ω–µ—Ç)\n"
        f"üéÅ –û—Ç–∫—Ä—ã—Ç—å 3 –∫–µ–π—Å–∞: {user['daily_tasks']['cases']}/3 (+2000 –∫–ª–∏–∫–æ–≤, +10 –º–æ–Ω–µ—Ç)\n"
        f"üîß –ö—É–ø–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ: {user['daily_tasks']['upgrade']}/1 (+500 –∫–ª–∏–∫–æ–≤, +5 –º–æ–Ω–µ—Ç)\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {user['daily_tasks']['referral']}/1 (+1000 –∫–ª–∏–∫–æ–≤, +10 –º–æ–Ω–µ—Ç)\n"
        f"ü§ù 500 –∫–ª–∞–Ω–æ–≤—ã—Ö –∫–ª–∏–∫–æ–≤: {user['daily_tasks']['clan_clicks']}/500 (+1500 –∫–ª–∏–∫–æ–≤, +8 –º–æ–Ω–µ—Ç)\n"
        f"{achievement_text}"
    )
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            await save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query(lambda c: c.data == "leaderboard")
async def handle_leaderboard(callback_query: CallbackQuery):
    if not users_data:
        message_text = "üìâ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç, –Ω–∏–∫—Ç–æ –µ—â—ë –Ω–µ –∫–ª–∏–∫–∞–ª! üò¢"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        user = get_user(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                await save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    sorted_users = sorted(users_data.items(), key=lambda x: x[1]["clicks"], reverse=True)
    message_text = "üèÜ <b>–õ–∏–¥–µ—Ä–±–æ—Ä–¥ (–¢–æ–ø-5)</b> ü•á\n\n"
    for i, (user_id, data) in enumerate(sorted_users[:5], 1):
        tag = f" [{data['tag']}]" if data["tag"] else ""
        message_text += f"{i}. {data['username'] or '–ê–Ω–æ–Ω–∏–º'}{tag}: {data['clicks']} –∫–ª–∏–∫–æ–≤ üíé\n"
    user = get_user(callback_query.from_user.id)
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            await save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query(lambda c: c.data == "upgrade")
async def handle_upgrade(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    upgrade_cost = get_upgrade_cost(user)
    missing = check_resources(user, clicks_needed=upgrade_cost)
    if missing:
        message_text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤! –ù—É–∂–Ω–æ {', '.join(missing)} üò¢"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                await save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    user["clicks"] -= upgrade_cost
    user["upgrade_level"] += 1
    user["click_multiplier"] = user["upgrade_level"] + 1
    user["daily_tasks"]["upgrade"] += 1
    if user["daily_tasks"]["upgrade"] == 1:
        user["clicks"] += 500
        user["coins"] += 5
    rewards = check_achievements(user)
    await save_data()
    message_text = f"üîß –£–ª—É—á—à–µ–Ω–∏–µ –∫—É–ø–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å +{user['click_multiplier']} –∫–ª–∏–∫–æ–≤ –∑–∞ –Ω–∞–∂–∞—Ç–∏–µ! üöÄ"
    if rewards:
        message_text += "\n" + "\n".join(rewards)
    if user["daily_tasks"]["upgrade"] == 1:
        message_text += "\nüéØ –ó–∞–¥–∞–Ω–∏–µ '–ö—É–ø–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ' –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +500 –∫–ª–∏–∫–æ–≤, +5 –º–æ–Ω–µ—Ç! üéâ"
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            await save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query(lambda c: c.data == "select_case")
async def handle_select_case(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    message_text = "üéÅ <b>–í—ã–±–µ—Ä–∏ –∫–µ–π—Å</b> üéâ:"
    reply_markup = InlineKeyboardBuilder()
    reply_markup.button(text="üéÅ –û–±—ã—á–Ω—ã–π –∫–µ–π—Å (1000 –∫–ª–∏–∫–æ–≤) üü¢", callback_data="case_common")
    reply_markup.button(text="üéÅ –≠–ø–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å (5000 –∫–ª–∏–∫–æ–≤) üîµ", callback_data="case_epic")
    reply_markup.button(text="üéÅ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–µ–π—Å (20000 –∫–ª–∏–∫–æ–≤) üü£", callback_data="case_legendary")
    reply_markup.button(text="üéÅ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–µ–π—Å (50 –º–æ–Ω–µ—Ç) ‚ú®", callback_data="case_exclusive")
    reply_markup.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    reply_markup.adjust(1)
    reply_markup = reply_markup.as_markup()
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            await save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith("case_"))
async def handle_case(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    case_type = callback_query.data.split("_")[1]
    case_costs = {"common": (1000, 0), "epic": (5000, 0), "legendary": (20000, 0), "exclusive": (0, 50)}
    click_cost, coin_cost = case_costs[case_type]
    missing = check_resources(user, clicks_needed=click_cost, coins_needed=coin_cost)
    if missing:
        message_text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤! –ù—É–∂–Ω–æ {', '.join(missing)} üò¢"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                await save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    user["clicks"] -= click_cost
    user["coins"] -= coin_cost
    user["cases_opened"] = user.get("cases_opened", 0) + 1
    user["daily_tasks"]["cases"] += 1
    if user["daily_tasks"]["cases"] == 3:
        user["clicks"] += 2000
        user["coins"] += 10
    reward, coin_drop = get_case_reward(case_type, user["case_bonus"]) if case_type != "exclusive" else (10000, 20)
    user["clicks"] += reward
    user["coins"] += coin_drop
    if user["clan_id"]:
        clan = get_clan(user["clan_id"])
        clan_clicks = reward * 0.1 * (1.1 if clan["clan_booster"] > time.time() else 1.0)
        clan["clan_clicks"] += clan_clicks
        user["clan_clicks_contributed"] = user.get("clan_clicks_contributed", 0) + clan_clicks
    rewards = check_achievements(user)
    await save_data()

    case_emojis = {"common": "üü¢", "epic": "üîµ", "legendary": "üü£", "exclusive": "‚ú®"}
    await callback_query.message.edit_text(f"{case_emojis[case_type]} –û—Ç–∫—Ä—ã–≤–∞–µ–º {case_type.capitalize()} –∫–µ–π—Å... üéÅ")
    await asyncio.sleep(1)
    await callback_query.message.edit_text(f"{case_emojis[case_type]} –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ... ‚ú®")
    await asyncio.sleep(1)
    message_text = f"{case_emojis[case_type]} –ö–µ–π—Å {case_type.capitalize()} –æ—Ç–∫—Ä—ã—Ç! üéâ –¢—ã –ø–æ–ª—É—á–∏–ª +{reward} –∫–ª–∏–∫–æ–≤, +{coin_drop} –º–æ–Ω–µ—Ç! üíéü™ô\n–í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {user['clicks']}, –º–æ–Ω–µ—Ç: {user['coins']}"
    if rewards:
        message_text += "\n" + "\n".join(rewards)
    if user["daily_tasks"]["cases"] == 3:
        message_text += "\nüéØ –ó–∞–¥–∞–Ω–∏–µ '–û—Ç–∫—Ä—ã—Ç—å 3 –∫–µ–π—Å–∞' –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +2000 –∫–ª–∏–∫–æ–≤, +10 –º–æ–Ω–µ—Ç! üéâ"
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
        user["last_message_text"] = message_text
        user["last_reply_markup"] = reply_markup
        await save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query(lambda c: c.data == "daily_reward")
async def handle_daily_reward(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    current_time = time.time()
    cooldown = 3600
    if user["last_daily_reward"] != 0 and (current_time - user["last_daily_reward"]) < cooldown:
        remaining_time = int(cooldown - (current_time - user["last_daily_reward"]))
        minutes, seconds = divmod(remaining_time, 60)
        message_text = f"‚è≥ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–∏–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω {seconds} —Å–µ–∫! ‚è∞"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                await save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    user["clicks"] += 500
    user["coins"] += 5
    if user["clan_id"]:
        clan = get_clan(user["clan_id"])
        clan_clicks = 500 * 0.1 * (1.1 if clan["clan_booster"] > time.time() else 1.0)
        clan["clan_clicks"] += clan_clicks
        user["clan_clicks_contributed"] = user.get("clan_clicks_contributed", 0) + clan_clicks
    user["last_daily_reward"] = current_time
    rewards = check_achievements(user)
    await save_data()
    message_text = f"üéà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–∏–∑ –ø–æ–ª—É—á–µ–Ω! +500 –∫–ª–∏–∫–æ–≤, +5 –º–æ–Ω–µ—Ç! üíéü™ô\n–í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {user['clicks']}, –º–æ–Ω–µ—Ç: {user['coins']}"
    if rewards:
        message_text += "\n" + "\n".join(rewards)
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            await save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query(lambda c: c.data == "shop")
async def handle_shop(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    autoclicker_cost = get_autoclicker_cost(user)
    message_text = "üè¨ <b>–ú–∞–≥–∞–∑–∏–Ω</b> üõí:"
    reply_markup = InlineKeyboardBuilder()
    if not user["autoclicker"]:
        reply_markup.button(text="üï∞Ô∏è –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä (5000 –∫–ª–∏–∫–æ–≤) ‚ö°", callback_data="buy_autoclicker")
    else:
        reply_markup.button(text=f"üï∞Ô∏è –£–ª—É—á—à–∏—Ç—å –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä (+5 –∫–ª–∏–∫–æ–≤/10 —Å–µ–∫ –∑–∞ {autoclicker_cost} üíé)", callback_data="upgrade_autoclicker")
    reply_markup.button(text="üéÅ –ë–æ–Ω—É—Å –∫ –∫–µ–π—Å–∞–º +5% (3000 –∫–ª–∏–∫–æ–≤) ‚ú®", callback_data="buy_case_bonus")
    reply_markup.button(text="üè∑Ô∏è –¢–µ–≥ '–ë–æ–≥–∞—á' (50 –º–æ–Ω–µ—Ç) üí∞", callback_data="buy_tag_rich")
    reply_markup.button(text="üöÄ –ë—É—Å—Ç–µ—Ä –∫–ª–∏–∫–æ–≤ +50% (30 –º–æ–Ω–µ—Ç, 1 —á–∞—Å) ‚ö°", callback_data="buy_click_booster")
    reply_markup.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    reply_markup.adjust(1)
    reply_markup = reply_markup.as_markup()
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            await save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query(lambda c: c.data == "buy_autoclicker")
async def buy_autoclicker(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    if user["autoclicker"]:
        message_text = "‚ùå –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä —É–∂–µ –∫—É–ø–ª–µ–Ω! üòï"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                await save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    missing = check_resources(user, clicks_needed=5000)
    if missing:
        message_text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤! –ù—É–∂–Ω–æ {', '.join(missing)} üò¢"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                await save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    user["clicks"] -= 5000
    user["autoclicker"] = True
    user["autoclicker_level"] = 1
    asyncio.create_task(autoclicker_task(callback_query.from_user.id))
    await save_data()
    message_text = "üï∞Ô∏è –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –∫—É–ø–ª–µ–Ω! +10 –∫–ª–∏–∫–æ–≤ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥! ‚ö°"
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            await save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query(lambda c: c.data == "upgrade_autoclicker")
async def upgrade_autoclicker(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    autoclicker_cost = get_autoclicker_cost(user)
    missing = check_resources(user, clicks_needed=autoclicker_cost)
    if missing:
        message_text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤! –ù—É–∂–Ω–æ {', '.join(missing)} üò¢"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                await save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    user["clicks"] -= autoclicker_cost
    user["autoclicker_level"] += 1
    user["daily_tasks"]["upgrade"] += 1
    if user["daily_tasks"]["upgrade"] == 1:
        user["clicks"] += 500
        user["coins"] += 5
    await save_data()
    clicks_per_cycle = 10 + 5 * (user["autoclicker_level"] - 1)
    message_text = f"üï∞Ô∏è –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è {user['autoclicker_level']}! –¢–µ–ø–µ—Ä—å +{clicks_per_cycle} –∫–ª–∏–∫–æ–≤ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥! ‚ö°"
    if user["daily_tasks"]["upgrade"] == 1:
        message_text += "\nüéØ –ó–∞–¥–∞–Ω–∏–µ '–ö—É–ø–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ' –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +500 –∫–ª–∏–∫–æ–≤, +5 –º–æ–Ω–µ—Ç! üéâ"
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            await save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query(lambda c: c.data == "buy_case_bonus")
async def buy_case_bonus(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    if user["case_bonus"] >= 0.05:
        message_text = "‚ùå –ë–æ–Ω—É—Å –∫ –∫–µ–π—Å–∞–º —É–∂–µ –∫—É–ø–ª–µ–Ω! üòï"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                await save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    missing = check_resources(user, clicks_needed=3000)
    if missing:
        message_text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤! –ù—É–∂–Ω–æ {', '.join(missing)} üò¢"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                await save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    user["clicks"] -= 3000
    user["case_bonus"] = 0.05
    await save_data()
    message_text = "üéÅ –ë–æ–Ω—É—Å –∫ –∫–µ–π—Å–∞–º –∫—É–ø–ª–µ–Ω! +5% –∫ —à–∞–Ω—Å—É –±–æ–ª—å—à–∏—Ö –Ω–∞–≥—Ä–∞–¥! ‚ú®"
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            await save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query(lambda c: c.data == "buy_tag_rich")
async def buy_tag_rich(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    if user["tag"]:
        message_text = "‚ùå –¢–µ–≥ —É–∂–µ –∫—É–ø–ª–µ–Ω! üòï"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                await save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    missing = check_resources(user, coins_needed=50)
    if missing:
        message_text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤! –ù—É–∂–Ω–æ {', '.join(missing)} üò¢"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                await save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    user["coins"] -= 50
    user["tag"] = "–ë–æ–≥–∞—á"
    await save_data()
    message_text = f"üè∑Ô∏è –¢–µ–≥ '–ë–æ–≥–∞—á' –∫—É–ø–ª–µ–Ω! –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –Ω–∏–∫ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ: @{user['username']} [–ë–æ–≥–∞—á] üí∞"
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            await save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query(lambda c: c.data == "buy_click_booster")
async def buy_click_booster(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    current_time = time.time()
    if user.get("click_booster", 0) > current_time:
        remaining_time = int(user["click_booster"] - current_time)
        minutes, seconds = divmod(remaining_time, 60)
        message_text = f"‚ùå –ë—É—Å—Ç–µ—Ä —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω! –î–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω {seconds} —Å–µ–∫! ‚è∞"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                await save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    missing = check_resources(user, coins_needed=30)
    if missing:
        message_text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤! –ù—É–∂–Ω–æ {', '.join(missing)} üò¢"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                await save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    user["coins"] -= 30
    user["click_booster"] = current_time + 3600
    await save_data()
    message_text = "üöÄ –ë—É—Å—Ç–µ—Ä –∫–ª–∏–∫–æ–≤ +50% –∫—É–ø–ª–µ–Ω! –î–µ–π—Å—Ç–≤—É–µ—Ç 1 —á–∞—Å! ‚ö°"
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            await save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query(lambda c: c.data == "lottery")
async def handle_lottery(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    current_time = time.time()
    cooldown = 3600
    if user["last_lottery"] != 0 and (current_time - user["last_lottery"]) < cooldown:
        remaining_time = int(cooldown - (current_time - user["last_lottery"]))
        minutes, seconds = divmod(remaining_time, 60)
        message_text = f"‚è≥ –õ–æ—Ç–µ—Ä–µ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω {seconds} —Å–µ–∫! ‚è∞"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                await save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    missing = check_resources(user, clicks_needed=1000)
    if missing:
        message_text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤! –ù—É–∂–Ω–æ {', '.join(missing)} üò¢"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                await save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    user["clicks"] -= 1000
    user["last_lottery"] = current_time
    reward, coin_drop = get_lottery_reward()
    if reward > 0:
        user["clicks"] += reward
        user["coins"] += coin_drop
        user["lottery_wins"] = user.get("lottery_wins", 0) + 1
        if user["clan_id"]:
            clan = get_clan(user["clan_id"])
            clan_clicks = reward * 0.1 * (1.1 if clan["clan_booster"] > time.time() else 1.0)
            clan["clan_clicks"] += clan_clicks
            user["clan_clicks_contributed"] = user.get("clan_clicks_contributed", 0) + clan_clicks
    rewards = check_achievements(user)
    await save_data()

    await callback_query.message.edit_text("üé∞ –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω... üçÄ")
    await asyncio.sleep(1)
    await callback_query.message.edit_text("üé∞ –ï—â—ë —á—É—Ç—å-—á—É—Ç—å... ‚ú®")
    await asyncio.sleep(1)
    message_text = f"üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –ª–æ—Ç–µ—Ä–µ–∏! {'–¢—ã –≤—ã–∏–≥—Ä–∞–ª +'+str(reward)+' –∫–ª–∏–∫–æ–≤, +'+str(coin_drop)+' –º–æ–Ω–µ—Ç! üíéü™ô' if reward > 0 else '–£–≤—ã, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª. üò¢'} –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {user['clicks']}, –º–æ–Ω–µ—Ç: {user['coins']}"
    if rewards:
        message_text += "\n" + "\n".join(rewards)
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
        user["last_message_text"] = message_text
        user["last_reply_markup"] = reply_markup
        await save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query(lambda c: c.data == "achievements")
async def handle_achievements(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    message_text = (
        f"üèÖ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>:\n"
        f"üåü –ö–ª–∏–∫–µ—Ä-–Ω–æ–≤–∏—á–æ–∫: {get_progress_bar(user['achievements']['clicker_novice'], 500)} {user['achievements']['clicker_novice']}/500\n"
        f"üéÅ –ú–∞—Å—Ç–µ—Ä –∫–µ–π—Å–æ–≤: {get_progress_bar(user.get('cases_opened', 0), 10)} {user.get('cases_opened', 0)}/10\n"
        f"üí∞ –ë–æ–≥–∞—á: {get_progress_bar(user['clicks'], 10000)} {min(user['clicks'], 10000)}/10000\n"
        f"ü§ù –ö–ª–∞–Ω–æ–≤—ã–π –≥–µ—Ä–æ–π: {get_progress_bar(user.get('clan_clicks_contributed', 0), 1000)} {min(user.get('clan_clicks_contributed', 0), 1000)}/1000\n"
        f"üé∞ –õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –º–∞–≥–Ω–∞—Ç: {get_progress_bar(user.get('lottery_wins', 0), 5)} {user.get('lottery_wins', 0)}/5\n"
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä: {get_progress_bar(user['referrals'], 3)} {user['referrals']}/3"
    )
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            await save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query(lambda c: c.data == "promo")
async def handle_promo(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    message_text = "üîë –í–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /promo <–∫–æ–¥> üéüÔ∏è"
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            await save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query(lambda c: c.data == "clan")
async def handle_clan(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    if not user["clan_id"]:
        message_text = "ü§ù –¢—ã –Ω–µ –≤ –∫–ª–∞–Ω–µ! –°–æ–∑–¥–∞–π –∫–ª–∞–Ω (/create_clan –ù–∞–∑–≤–∞–Ω–∏–µ) –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Å—å (/join_clan –ù–∞–∑–≤–∞–Ω–∏–µ) üë•"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                await save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    clan = get_clan(user["clan_id"])
    clan_booster_cost = get_clan_booster_cost(clan)
    clan_autoclicker_cost = get_clan_autoclicker_cost(clan)
    members = ", ".join([users_data.get(mid, {}).get("username", "–ê–Ω–æ–Ω–∏–º") for mid in clan["members"]])
    message_text = (
        f"üè∞ <b>–ö–ª–∞–Ω: {clan['name']}</b> {f'[{clan['clan_tag']}]' if clan['clan_tag'] else ''}\n"
        f"ü§ù –£—á–∞—Å—Ç–Ω–∏–∫–∏: {members}\n"
        f"üíé –ö–ª–∞–Ω–æ–≤—ã–µ –∫–ª–∏–∫–∏: {clan['clan_clicks']}\n"
        f"üöÄ –ë—É—Å—Ç–µ—Ä: {'–ê–∫—Ç–∏–≤–µ–Ω' if clan['clan_booster'] > time.time() else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'} (+10% –∫ –∫–ª–∞–Ω–æ–≤—ã–º –∫–ª–∏–∫–∞–º)\n"
        f"üï∞Ô∏è –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä: –£—Ä–æ–≤–µ–Ω—å {clan['clan_autoclicker']} (+{50 * clan['clan_autoclicker']} –∫–ª–∞–Ω–æ–≤—ã—Ö –∫–ª–∏–∫–æ–≤/10 —Å–µ–∫)"
    )
    reply_markup = InlineKeyboardBuilder()
    reply_markup.button(text=f"üöÄ –ö—É–ø–∏—Ç—å –±—É—Å—Ç–µ—Ä ({clan_booster_cost} –∫–ª–∞–Ω–æ–≤—ã—Ö –∫–ª–∏–∫–æ–≤)", callback_data="buy_clan_booster")
    reply_markup.button(text=f"üï∞Ô∏è –ö—É–ø–∏—Ç—å –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä ({clan_autoclicker_cost} –∫–ª–∞–Ω–æ–≤—ã—Ö –∫–ª–∏–∫–æ–≤)", callback_data="buy_clan_autoclicker")
    reply_markup.button(text="üè∑Ô∏è –ö—É–ø–∏—Ç—å —Ç–µ–≥ '–≠–ª–∏—Ç–∞' (5000 –∫–ª–∞–Ω–æ–≤—ã—Ö –∫–ª–∏–∫–æ–≤)", callback_data="buy_clan_tag")
    reply_markup.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    reply_markup.adjust(1)
    reply_markup = reply_markup.as_markup()
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            await save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query(lambda c: c.data == "buy_clan_booster")
async def buy_clan_booster(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    if not user["clan_id"]:
        message_text = "‚ùå –¢—ã –Ω–µ –≤ –∫–ª–∞–Ω–µ! üòï"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                await save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    clan = get_clan(user["clan_id"])
    clan_booster_cost = get_clan_booster_cost(clan)
    missing = check_resources(user, clan_clicks_needed=clan_booster_cost)
    if missing:
        message_text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤! –ù—É–∂–Ω–æ {', '.join(missing)} üò¢"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                await save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    clan["clan_clicks"] -= clan_booster_cost
    clan["clan_booster"] = time.time() + 3600
    await save_data()
    message_text = "üöÄ –ö–ª–∞–Ω–æ–≤—ã–π –±—É—Å—Ç–µ—Ä –∫—É–ø–ª–µ–Ω! +10% –∫ –∫–ª–∞–Ω–æ–≤—ã–º –∫–ª–∏–∫–∞–º –Ω–∞ 1 —á–∞—Å! ‚ö°"
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            await save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query(lambda c: c.data == "buy_clan_autoclicker")
async def buy_clan_autoclicker(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    if not user["clan_id"]:
        message_text = "‚ùå –¢—ã –Ω–µ –≤ –∫–ª–∞–Ω–µ! üòï"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                await save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    clan = get_clan(user["clan_id"])
    clan_autoclicker_cost = get_clan_autoclicker_cost(clan)
    missing = check_resources(user, clan_clicks_needed=clan_autoclicker_cost)
    if missing:
        message_text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤! –ù—É–∂–Ω–æ {', '.join(missing)} üò¢"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                await save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    clan["clan_clicks"] -= clan_autoclicker_cost
    clan["clan_autoclicker"] += 1
    asyncio.create_task(clan_autoclicker_task(user["clan_id"]))
    await save_data()
    message_text = f"üï∞Ô∏è –ö–ª–∞–Ω–æ–≤—ã–π –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –∫—É–ø–ª–µ–Ω/—É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è {clan['clan_autoclicker']}! +{50 * clan['clan_autoclicker']} –∫–ª–∞–Ω–æ–≤—ã—Ö –∫–ª–∏–∫–æ–≤ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥! ‚ö°"
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            await save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query(lambda c: c.data == "buy_clan_tag")
async def buy_clan_tag(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    if not user["clan_id"]:
        message_text = "‚ùå –¢—ã –Ω–µ –≤ –∫–ª–∞–Ω–µ! üòï"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                await save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    clan = get_clan(user["clan_id"])
    if clan["clan_tag"]:
        message_text = "‚ùå –¢–µ–≥ –∫–ª–∞–Ω–∞ —É–∂–µ –∫—É–ø–ª–µ–Ω! üòï"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                await save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    missing = check_resources(user, clan_clicks_needed=5000)
    if missing:
        message_text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤! –ù—É–∂–Ω–æ {', '.join(missing)} üò¢"
        reply_markup = get_main_keyboard(callback_query.from_user.id)
        try:
            if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
                await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
                user["last_message_text"] = message_text
                user["last_reply_markup"] = reply_markup
                await save_data()
            await callback_query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback_query.answer()
            else:
                await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
                await callback_query.answer()
        return
    clan["clan_clicks"] -= 5000
    clan["clan_tag"] = "–≠–ª–∏—Ç–∞"
    await save_data()
    message_text = f"üè∑Ô∏è –¢–µ–≥ –∫–ª–∞–Ω–∞ '–≠–ª–∏—Ç–∞' –∫—É–ø–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –∫–ª–∞–Ω –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ: {clan['name']} [–≠–ª–∏—Ç–∞] üè∞"
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            await save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query(lambda c: c.data == "activity")
async def handle_activity(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    reset_daily_tasks(user)
    message_text = (
        f"üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b> üî•\n"
        f"‚úÖ –°–¥–µ–ª–∞—Ç—å 100 –∫–ª–∏–∫–æ–≤: {user['daily_tasks']['clicks']}/100 (+1000 –∫–ª–∏–∫–æ–≤, +5 –º–æ–Ω–µ—Ç)\n"
        f"üéÅ –û—Ç–∫—Ä—ã—Ç—å 3 –∫–µ–π—Å–∞: {user['daily_tasks']['cases']}/3 (+2000 –∫–ª–∏–∫–æ–≤, +10 –º–æ–Ω–µ—Ç)\n"
        f"üîß –ö—É–ø–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ: {user['daily_tasks']['upgrade']}/1 (+500 –∫–ª–∏–∫–æ–≤, +5 –º–æ–Ω–µ—Ç)\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {user['daily_tasks']['referral']}/1 (+1000 –∫–ª–∏–∫–æ–≤, +10 –º–æ–Ω–µ—Ç)\n"
        f"ü§ù 500 –∫–ª–∞–Ω–æ–≤—ã—Ö –∫–ª–∏–∫–æ–≤: {user['daily_tasks']['clan_clicks']}/500 (+1500 –∫–ª–∏–∫–æ–≤, +8 –º–æ–Ω–µ—Ç)"
    )
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            await save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query(lambda c: c.data == "game_info")
async def handle_game_info(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    message_text = (
        "üìú <b>–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã</b> ‚ÑπÔ∏è\n\n"
        "–≠—Ç–æ –∫–ª–∏–∫–µ—Ä, –≥–¥–µ —Ç—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å –∫–ª–∏–∫–∏ –∏ –º–æ–Ω–µ—Ç—ã, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –ª—É—á—à–∏–º! üíéü™ô\n"
        "üñ±Ô∏è <b>–ö–ª–∏–∫</b>: –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É '–ö–ª–∏–∫', —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–ª–∏–∫–∏. –£–ª—É—á—à–∞–π –∫–ª–∏–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ '–£–ª—É—á—à–µ–Ω–∏–µ'.\n"
        "üéÅ <b>–ö–µ–π—Å—ã</b>: –û—Ç–∫—Ä—ã–≤–∞–π –∫–µ–π—Å—ã –∑–∞ –∫–ª–∏–∫–∏ –∏–ª–∏ –º–æ–Ω–µ—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã.\n"
        "üè¨ <b>–ú–∞–≥–∞–∑–∏–Ω</b>: –ü–æ–∫—É–ø–∞–π –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä, –±—É—Å—Ç–µ—Ä—ã –∏ —Ç–µ–≥–∏ –∑–∞ –∫–ª–∏–∫–∏ –∏–ª–∏ –º–æ–Ω–µ—Ç—ã.\n"
        "ü§ù <b>–ö–ª–∞–Ω—ã</b>: –°–æ–∑–¥–∞–≤–∞–π –∏–ª–∏ –≤—Å—Ç—É–ø–∞–π –≤ –∫–ª–∞–Ω, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–ª–∞–Ω–æ–≤—ã–µ –∫–ª–∏–∫–∏ –∏ –ø–æ–∫—É–ø–∞—Ç—å –∫–ª–∞–Ω–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è.\n"
        f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã</b>: –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ (/referral) –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n"
        f"üé∞ <b>–õ–æ—Ç–µ—Ä–µ—è</b>: –ò—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É –∑–∞ 1000 –∫–ª–∏–∫–æ–≤!\n"
        f"üèÖ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –∑–∞–¥–∞–Ω–∏—è</b>: –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π –Ω–∞–≥—Ä–∞–¥—ã!\n"
        f"üåü <b>–°–µ–∑–æ–Ω</b>: {'–î–æ 15 –∞–≤–≥—É—Å—Ç–∞ –∫–ª–∏–∫–∏ —É–¥–≤–∞–∏–≤–∞—é—Ç—Å—è!' if time.time() < SEASON_END else '–°–µ–∑–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω!'}\n"
        "–ò–≥—Ä–∞–π, —É–ª—É—á—à–∞–π—Å—è –∏ —Å—Ç–∞–Ω—å –ª–∏–¥–µ—Ä–æ–º! üöÄ"
    )
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            await save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

@dp.callback_query(lambda c: c.data == "back")
async def handle_back(callback_query: CallbackQuery):
    user = get_user(callback_query.from_user.id)
    message_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª–∏–∫–µ—Ä! üéÆ\n{'üåü –°–µ–∑–æ–Ω: –¥–≤–æ–π–Ω—ã–µ –∫–ª–∏–∫–∏ –¥–æ 15 –∞–≤–≥—É—Å—Ç–∞! üåü' if time.time() < SEASON_END else ''}"
    reply_markup = get_main_keyboard(callback_query.from_user.id)
    try:
        if user["last_message_text"] != message_text or user["last_reply_markup"] != reply_markup:
            await callback_query.message.edit_text(message_text, reply_markup=reply_markup)
            user["last_message_text"] = message_text
            user["last_reply_markup"] = reply_markup
            await save_data()
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer()
        else:
            await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} üò¢")
            await callback_query.answer()

async def main():
    load_data()
    await set_bot_commands()
    for user_id, user in users_data.items():
        if user["autoclicker"]:
            asyncio.create_task(autoclicker_task(user_id))
    for clan_id, clan in clans.items():
        if clan["clan_autoclicker"] > 0:
            asyncio.create_task(clan_autoclicker_task(clan_id))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
